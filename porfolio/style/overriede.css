/* :root {
  display: flex;
  align-items: center;
  flex-direction: row;
  justify-content: center;
} */

.customCard {
  padding: 32px 32px 150px;
  display: flex;
  flex-flow: row wrap;
  align-items: flex-start;
  justify-content: center;
  gap: 16px;
}

.card {
  position: relative;
  width: 220px;
  height: 281px;
  perspective: 100000px; /*카드가 뒤집어질때 투시를 주기위한 1에 가까울수록 과감한 투시.*/
}

/*class face에 공통 적용할 속성*/
.face {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  transition: all 1s ease;
}

/*card의 앞면과 뒷면의 디폴트 상태*/
.front {
  z-index: 1; /*z값을 주어 앞면이 뒷면보다 앞으로 튀어나온 상태*/
}

.back {
  z-index: 0; /*z값이 앞면보다 낮으므로 앞면보다 낮은 레이어에 위치한다.*/
}

/*앞뒷면 모두 hover시 회전 이벤트를 주어야 카드 한장이 맞물려서 회전하는 느낌을 줄 수 있다.*/
/*card를 hover할 경우 클래스 front에 적용할 속성*/
.card:hover .front {
  transform: rotateY(-180deg); /*카드가 Y축을 기준으로 회전 -180도 회전*/
  transition: all 1s ease;
  z-index: 0; /*카드가 뒤집어지면 뒷면이 앞면보다 튀어나오게끔 z값을 낮춘다.*/
}

/*card를 hover할 경우 클래스 back에 적용할 속성*/
.card:hover .back {
  transform: rotateY(-180deg); /*카드가 Y축을 기준으로 회전 -180도 회전*/
  transition: all 1s ease;
  z-index: 1; /*카드가 뒤집어지면 뒷면이 앞면보다 튀어나오게끔 z값을 높인다.*/
}
